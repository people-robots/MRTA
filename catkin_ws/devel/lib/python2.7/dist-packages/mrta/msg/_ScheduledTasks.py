# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mrta/ScheduledTasks.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mrta.msg

class ScheduledTasks(genpy.Message):
  _md5sum = "3b30c4166f23c14e0ae3f2931c9b42d8"
  _type = "mrta/ScheduledTasks"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 robot_id
Task[] tasks
================================================================================
MSG: mrta/Task
int32 id
int32 start_time
int32 finish_time
int32 est
int32 lst
int32 eft
int32 lft
int32 duration
int32[2] location"""
  __slots__ = ['robot_id','tasks']
  _slot_types = ['int32','mrta/Task[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot_id,tasks

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ScheduledTasks, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.robot_id is None:
        self.robot_id = 0
      if self.tasks is None:
        self.tasks = []
    else:
      self.robot_id = 0
      self.tasks = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_i().pack(self.robot_id))
      length = len(self.tasks)
      buff.write(_struct_I.pack(length))
      for val1 in self.tasks:
        _x = val1
        buff.write(_get_struct_8i().pack(_x.id, _x.start_time, _x.finish_time, _x.est, _x.lst, _x.eft, _x.lft, _x.duration))
        buff.write(_get_struct_2i().pack(*val1.location))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.tasks is None:
        self.tasks = None
      end = 0
      start = end
      end += 4
      (self.robot_id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tasks = []
      for i in range(0, length):
        val1 = mrta.msg.Task()
        _x = val1
        start = end
        end += 32
        (_x.id, _x.start_time, _x.finish_time, _x.est, _x.lst, _x.eft, _x.lft, _x.duration,) = _get_struct_8i().unpack(str[start:end])
        start = end
        end += 8
        val1.location = _get_struct_2i().unpack(str[start:end])
        self.tasks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_i().pack(self.robot_id))
      length = len(self.tasks)
      buff.write(_struct_I.pack(length))
      for val1 in self.tasks:
        _x = val1
        buff.write(_get_struct_8i().pack(_x.id, _x.start_time, _x.finish_time, _x.est, _x.lst, _x.eft, _x.lft, _x.duration))
        buff.write(val1.location.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.tasks is None:
        self.tasks = None
      end = 0
      start = end
      end += 4
      (self.robot_id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tasks = []
      for i in range(0, length):
        val1 = mrta.msg.Task()
        _x = val1
        start = end
        end += 32
        (_x.id, _x.start_time, _x.finish_time, _x.est, _x.lst, _x.eft, _x.lft, _x.duration,) = _get_struct_8i().unpack(str[start:end])
        start = end
        end += 8
        val1.location = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=2)
        self.tasks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_8i = None
def _get_struct_8i():
    global _struct_8i
    if _struct_8i is None:
        _struct_8i = struct.Struct("<8i")
    return _struct_8i
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
