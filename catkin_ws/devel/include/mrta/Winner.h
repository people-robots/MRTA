// Generated by gencpp from file mrta/Winner.msg
// DO NOT EDIT!


#ifndef MRTA_MESSAGE_WINNER_H
#define MRTA_MESSAGE_WINNER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mrta/Task.h>

namespace mrta
{
template <class ContainerAllocator>
struct Winner_
{
  typedef Winner_<ContainerAllocator> Type;

  Winner_()
    : auc_id(0)
    , robot_id(0)
    , task()  {
    }
  Winner_(const ContainerAllocator& _alloc)
    : auc_id(0)
    , robot_id(0)
    , task(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _auc_id_type;
  _auc_id_type auc_id;

   typedef int32_t _robot_id_type;
  _robot_id_type robot_id;

   typedef  ::mrta::Task_<ContainerAllocator>  _task_type;
  _task_type task;





  typedef boost::shared_ptr< ::mrta::Winner_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrta::Winner_<ContainerAllocator> const> ConstPtr;

}; // struct Winner_

typedef ::mrta::Winner_<std::allocator<void> > Winner;

typedef boost::shared_ptr< ::mrta::Winner > WinnerPtr;
typedef boost::shared_ptr< ::mrta::Winner const> WinnerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrta::Winner_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrta::Winner_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mrta

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'mrta': ['/home/kimwang/Desktop/MRTA-devel/catkin_ws/src/mrta/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mrta::Winner_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrta::Winner_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrta::Winner_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrta::Winner_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrta::Winner_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrta::Winner_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrta::Winner_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a4455477a8940672e1c8b3ed3d113e18";
  }

  static const char* value(const ::mrta::Winner_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa4455477a8940672ULL;
  static const uint64_t static_value2 = 0xe1c8b3ed3d113e18ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrta::Winner_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrta/Winner";
  }

  static const char* value(const ::mrta::Winner_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrta::Winner_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 auc_id\n\
int32 robot_id\n\
Task task\n\
================================================================================\n\
MSG: mrta/Task\n\
int32 id\n\
int32 start_time\n\
int32 finish_time\n\
int32 est\n\
int32 lst\n\
int32 eft\n\
int32 lft\n\
int32 duration\n\
int32[2] location\n\
";
  }

  static const char* value(const ::mrta::Winner_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrta::Winner_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.auc_id);
      stream.next(m.robot_id);
      stream.next(m.task);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Winner_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrta::Winner_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrta::Winner_<ContainerAllocator>& v)
  {
    s << indent << "auc_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.auc_id);
    s << indent << "robot_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robot_id);
    s << indent << "task: ";
    s << std::endl;
    Printer< ::mrta::Task_<ContainerAllocator> >::stream(s, indent + "  ", v.task);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRTA_MESSAGE_WINNER_H
