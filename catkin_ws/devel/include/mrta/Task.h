// Generated by gencpp from file mrta/Task.msg
// DO NOT EDIT!


#ifndef MRTA_MESSAGE_TASK_H
#define MRTA_MESSAGE_TASK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mrta
{
template <class ContainerAllocator>
struct Task_
{
  typedef Task_<ContainerAllocator> Type;

  Task_()
    : id(0)
    , start_time(0)
    , finish_time(0)
    , est(0)
    , lst(0)
    , eft(0)
    , lft(0)
    , duration(0)
    , location()  {
      location.assign(0);
  }
  Task_(const ContainerAllocator& _alloc)
    : id(0)
    , start_time(0)
    , finish_time(0)
    , est(0)
    , lst(0)
    , eft(0)
    , lft(0)
    , duration(0)
    , location()  {
  (void)_alloc;
      location.assign(0);
  }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _start_time_type;
  _start_time_type start_time;

   typedef int32_t _finish_time_type;
  _finish_time_type finish_time;

   typedef int32_t _est_type;
  _est_type est;

   typedef int32_t _lst_type;
  _lst_type lst;

   typedef int32_t _eft_type;
  _eft_type eft;

   typedef int32_t _lft_type;
  _lft_type lft;

   typedef int32_t _duration_type;
  _duration_type duration;

   typedef boost::array<int32_t, 2>  _location_type;
  _location_type location;





  typedef boost::shared_ptr< ::mrta::Task_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrta::Task_<ContainerAllocator> const> ConstPtr;

}; // struct Task_

typedef ::mrta::Task_<std::allocator<void> > Task;

typedef boost::shared_ptr< ::mrta::Task > TaskPtr;
typedef boost::shared_ptr< ::mrta::Task const> TaskConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrta::Task_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrta::Task_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mrta

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'mrta': ['/home/kimwang/Desktop/MRTA-devel/catkin_ws/src/mrta/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mrta::Task_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrta::Task_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrta::Task_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrta::Task_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrta::Task_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrta::Task_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrta::Task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d86f5da30db4f9950e8526203585575b";
  }

  static const char* value(const ::mrta::Task_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd86f5da30db4f995ULL;
  static const uint64_t static_value2 = 0x0e8526203585575bULL;
};

template<class ContainerAllocator>
struct DataType< ::mrta::Task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrta/Task";
  }

  static const char* value(const ::mrta::Task_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrta::Task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n\
int32 start_time\n\
int32 finish_time\n\
int32 est\n\
int32 lst\n\
int32 eft\n\
int32 lft\n\
int32 duration\n\
int32[2] location\n\
";
  }

  static const char* value(const ::mrta::Task_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrta::Task_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.start_time);
      stream.next(m.finish_time);
      stream.next(m.est);
      stream.next(m.lst);
      stream.next(m.eft);
      stream.next(m.lft);
      stream.next(m.duration);
      stream.next(m.location);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Task_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrta::Task_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrta::Task_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "start_time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.start_time);
    s << indent << "finish_time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.finish_time);
    s << indent << "est: ";
    Printer<int32_t>::stream(s, indent + "  ", v.est);
    s << indent << "lst: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lst);
    s << indent << "eft: ";
    Printer<int32_t>::stream(s, indent + "  ", v.eft);
    s << indent << "lft: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lft);
    s << indent << "duration: ";
    Printer<int32_t>::stream(s, indent + "  ", v.duration);
    s << indent << "location[]" << std::endl;
    for (size_t i = 0; i < v.location.size(); ++i)
    {
      s << indent << "  location[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.location[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRTA_MESSAGE_TASK_H
